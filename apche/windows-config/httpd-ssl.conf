#
# This is the Apache server configuration file providing SSL support.
# It contains the configuration directives to instruct the server how to
# serve pages over an https connection. For detailed information about these 
# directives see <URL:http://httpd.apache.org/docs/2.4/mod/mod_ssl.html>
# 
# Do NOT simply read the instructions in here without understanding
# what they do.  They're here only as hints or reminders.  If you are unsure
# consult the online docs. You have been warned.  
#
# Required modules: mod_log_config, mod_setenvif, mod_ssl,
#          socache_shmcb_module (for default value of SSLSessionCache)

#
# Pseudo Random Number Generator (PRNG):
# Configure one or more sources to seed the PRNG of the SSL library.
# The seed data should be of good random quality.
# WARNING! On some platforms /dev/random blocks if not enough entropy
# is available. This means you then cannot use the /dev/random device
# because it would lead to very long connection times (as long as
# it requires to make more entropy available). But usually those
# platforms additionally provide a /dev/urandom device which doesn't
# block. So, if available, use this one instead. Read the mod_ssl User
# Manual for more details.
#
#SSLRandomSeed startup file:/dev/random  512
#SSLRandomSeed startup file:/dev/urandom 512
#SSLRandomSeed connect file:/dev/random  512
#SSLRandomSeed connect file:/dev/urandom 512


#
# When we also provide SSL we have to listen to the 
# standard HTTP port (see above) and to the HTTPS port
#
# Note: Configurations that use IPv6 but not IPv4-mapped addresses need two
#       Listen directives: "Listen [::]:443" and "Listen 0.0.0.0:443"
#
Listen 443

##
##  SSL Global Context
##
##  All SSL configuration in this context applies both to
##  the main server and all SSL-enabled virtual hosts.
##

#   SSL Cipher Suite:
#   List the ciphers that the client is permitted to negotiate.
#   See the mod_ssl documentation for a complete list.
SSLCipherSuite HIGH:MEDIUM:!aNULL:!MD5

#   Speed-optimized SSL Cipher configuration:
#   If speed is your main concern (on busy HTTPS servers e.g.),
#   you might want to force clients to specific, performance
#   optimized ciphers. In this case, prepend those ciphers
#   to the SSLCipherSuite list, and enable SSLHonorCipherOrder.
#   Caveat: by giving precedence to RC4-SHA and AES128-SHA
#   (as in the example below), most connections will no longer
#   have perfect forward secrecy - if the server's key is
#   compromised, captures of past or future traffic must be
#   considered compromised, too.
#SSLCipherSuite RC4-SHA:AES128-SHA:HIGH:MEDIUM:!aNULL:!MD5
#SSLHonorCipherOrder on 

#   Pass Phrase Dialog:
#   Configure the pass phrase gathering process.
#   The filtering dialog program (`builtin' is an internal
#   terminal dialog) has to provide the pass phrase on stdout.
SSLPassPhraseDialog  builtin

#   Inter-Process Session Cache:
#   Configure the SSL Session Cache: First the mechanism 
#   to use and second the expiring timeout (in seconds).
#SSLSessionCache         "dbm:C:/Program Files/Apache Software Foundation/Apache2.4/logs/ssl_scache"
SSLSessionCache        "shmcb:C:/Program Files/Apache Software Foundation/Apache2.4/logs/ssl_scache(512000)"
SSLSessionCacheTimeout  300

##
## SSL Virtual Host Context
##

<VirtualHost 127.0.0.1:443>
	ServerName local.englishtown.com
	# ServerName local.ef.com
	ServerAlias dev.englishtown.com devus1.englishtown.com dev-services.englishtown.com dev-comet.englishtown.com local-ak.englishtown.com devdeepblue2.englishtown.com
	DocumentRoot "D:\Code"
    ErrorLog "logs/httpslocal.englishtown.com.log"
    CustomLog "logs/httpslocal.englishtown.com-access.log" common
	
#   General setup for the virtual host
	DocumentRoot "D:\Code"
	ServerName local.englishtown.com
	ErrorLog "logs/https-error.log"
	TransferLog "logs/https-transfer.log"

#   SSL Engine Switch:
#   Enable/Disable SSL for this virtual host.
SSLEngine on
SSLProxyEngine on
SSLProxyVerify none
SSLProxyCheckPeerCN off
SSLProxyCheckPeerExpire off 


Alias /_shared/opt-ui "D:\Code\SOLN\opt-ui\release" 
Alias /_shared/b2b-campus-enrollment-ui "D:\Code\SOLN\b2b-campus-enrollment-ui\release" 
Alias /_shared/b2b-campus-mypage-ui "D:\Code\SOLN\b2b-campus-mypage-ui\release"
Alias /_shared/campus-mypage-ui/latest "D:\Code\SOLN\campus-mypage-ui\_output\latest" 
Alias /_shared/campus-mypage-ui/2017.26.1 "D:\Code\SOLN\campus-mypage-ui"   
Alias /_shared/school-misc-ui "D:\Code\SOLN\school-misc-ui\release" 

Alias /_shared/asr-core "D:\Code\TSCHOOL\asr-core\output" 
Alias /_shared/headerfooter/snapshot "D:\Code\SOLN\et-ui-headerfooter\_output\latest" 
Alias /_shared/headerfooter "D:\Code\SOLN\et-ui-headerfooter\_output" 

Alias /_shared/livechat-ui/snapshot "D:\Code\SOLN\livechat-ui\release\latest" 
Alias /_shared/livechat-ui "D:\Code\SOLN\livechat-ui\release"

Alias /_shared/techcheck-ui/snapshot "D:\Code\TSCHOOL\techcheck-ui\src" 

Alias /_shared/campus-studyplan-ui/snapshot "D:\Code\SOLN\campus-studyplan-ui" 
Alias /_shared/campus-studyplan-ui "D:\Code\SOLN\campus-studyplan-ui\release" 

Alias /_shared/campus-mypage-ui-shared "D:\Code\SOLN\campus-mypage-ui-shared\release" 
Alias /_shared/jquery  "D:\Code\SHARE\ui-shared-dist\jquery"
Alias /_shared/jquery-ui  "D:\Code\SHARE\ui-shared-dist\jquery-ui"

Alias /_shared/when-compat "D:\Code\SHARE\ui-shared-dist\when-compat" 
Alias /_shared/tooltips-ui/latest "D:\Code\SOLN\tooltips-ui\_output\latest"
Alias /_shared/tooltips-ui/snapshot "D:\Code\SOLN\tooltips-ui\src"  
Alias /_shared/tooltips-ui "D:\Code\SHARE\ui-shared-dist\tooltips-ui"

Alias /_shared/school-ui-activity-container/snapshot "D:\Code\TSCHOOL\school-ui-activity-container\src"  
Alias /_shared/school-ui-activity-container "D:\Code\TSCHOOL\school-ui-activity-container\_output"

Alias /_shared/school-ui-activity/snapshot "D:\Code\TSCHOOL\school-ui-activity\src"  
Alias /_shared/school-ui-activity "D:\Code\TSCHOOL\school-ui-activity\_output" 

Alias /_shared/school-ui-studyplan/snapshot "D:\Code\SOLN\school-ui-studyplan\src"
Alias /_shared/school-ui-studyplan "D:\Code\SOLN\school-ui-studyplan\_output"

#Alias /_shared/school-ui-studyplan/snapshot "D:\Code\TSCHOOL\school-ui-studyplan\src"
#Alias /_shared/school-ui-studyplan "D:\Code\TSCHOOL\school-ui-studyplan\_output"

Alias /_shared/school-ui-shared/snapshot "D:\Code\TSCHOOL\school-ui-shared\_output\snapshot"
Alias /_shared/school-ui-shared "D:\Code\TSCHOOL\school-ui-shared\_output"
Alias /_shared/evc-ui-checkpoint "D:\Code\COMM\evc-ui-checkpoint\_output"
Alias /_shared/evc-ui-app-gl "D:\Code\COMM\evc-ui-app-gl\_output"
Alias /_shared/school-ui-bootstrap "D:\Code\TSCHOOL\school-ui-bootstrap\_output"

Alias /_shared/school-ui-progress-report/snapshot "D:\Code\TSCHOOL\school-ui-progress-report\src"
Alias /_shared/school-ui-progress-report "D:\Code\TSCHOOL\school-ui-progress-report\src"

Alias /_shared/crc-ui "D:\Code\SOLN\crc-ui\release"
Alias /_shared/crc-ui-progress-report "D:\Code\SOLN\crc-ui-progress-report\release"
Alias /_shared/jquery-scrollbar "D:\Code\SHARE\ui-shared-dist\jquery-scrollbar"
Alias /_shared/f2f-ui "D:\Code\SOLN\f2f-ui\dist"
Alias /_shared "D:\Code\SHARE\ui-shared-dist"

ProxyPreserveHost On
#ProxyVia On
#Header add vhost https-default
#ProxyTimeout 600
#RequestHeader set ClientProtocol https


ProxyPass /_shared !
ProxyPass /SOLN !
ProxyPass /TSCHOOL !


#for live
#ProxyPass /                       https://corporate.ef.com/  retry=0
#ProxyPassReverse / https://corporate.ef.com/

#for staging
#ProxyPass /                       https://staging.englishtown.com/  retry=0
#ProxyPassReverse / https://staging.englishtown.com/


#for qa
#ProxyPass /                       https://qa.englishtown.com/  retry=0
#ProxyPassReverse / https://qa.englishtown.com/

#for uat
ProxyPass /                       https://cllsuat.englishtown.com/ retry=0
ProxyPassReverse / https://cllsuat.englishtown.com/

#for newhouse QA
#ProxyPass /         https://qa-corporate.ef.com/ retry=0
#ProxyPassReverse /  https://qa-corporate.ef.com/


# for local 
#ProxyPass /                       https://10.128.42.96/ retry=0
#ProxyPassReverse / https://10.128.42.96/



#   Server Certificate:
#   Point SSLCertificateFile at a PEM encoded certificate.  If
#   the certificate is encrypted, then you will be prompted for a
#   pass phrase.  Note that a kill -HUP will prompt again.  Keep
#   in mind that if you have both an RSA and a DSA certificate you
#   can configure both in parallel (to also allow the use of DSA
#   ciphers, etc.)
#   Some ECC cipher suites (http://www.ietf.org/rfc/rfc4492.txt)
#   require an ECC certificate which can also be configured in
#   parallel.
SSLCertificateFile "C:/Program Files/Apache Software Foundation/Apache2.4/conf/server.crt"
#SSLCertificateFile "C:/Program Files/Apache Software Foundation/Apache2.4/conf/server-dsa.crt"
#SSLCertificateFile "C:/Program Files/Apache Software Foundation/Apache2.4/conf/server-ecc.crt"

#   Server Private Key:
#   If the key is not combined with the certificate, use this
#   directive to point at the key file.  Keep in mind that if
#   you've both a RSA and a DSA private key you can configure
#   both in parallel (to also allow the use of DSA ciphers, etc.)
#   ECC keys, when in use, can also be configured in parallel
SSLCertificateKeyFile "C:/Program Files/Apache Software Foundation/Apache2.4/conf/server.key"
#SSLCertificateKeyFile "C:/Program Files/Apache Software Foundation/Apache2.4/conf/server-dsa.key"
#SSLCertificateKeyFile "C:/Program Files/Apache Software Foundation/Apache2.4/conf/server-ecc.key"

#   Server Certificate Chain:
#   Point SSLCertificateChainFile at a file containing the
#   concatenation of PEM encoded CA certificates which form the
#   certificate chain for the server certificate. Alternatively
#   the referenced file can be the same as SSLCertificateFile
#   when the CA certificates are directly appended to the server
#   certificate for convenience.
#SSLCertificateChainFile "C:/Program Files/Apache Software Foundation/Apache2.4/conf/server-ca.crt"

#   Certificate Authority (CA):
#   Set the CA certificate verification path where to find CA
#   certificates for client authentication or alternatively one
#   huge file containing all of them (file must be PEM encoded)
#   Note: Inside SSLCACertificatePath you need hash symlinks
#         to point to the certificate files. Use the provided
#         Makefile to update the hash symlinks after changes.
#SSLCACertificatePath "C:/Program Files/Apache Software Foundation/Apache2.4/conf/ssl.crt"
#SSLCACertificateFile "C:/Program Files/Apache Software Foundation/Apache2.4/conf/ssl.crt/ca-bundle.crt"

#   Certificate Revocation Lists (CRL):
#   Set the CA revocation path where to find CA CRLs for client
#   authentication or alternatively one huge file containing all
#   of them (file must be PEM encoded).
#   The CRL checking mode needs to be configured explicitly
#   through SSLCARevocationCheck (defaults to "none" otherwise).
#   Note: Inside SSLCARevocationPath you need hash symlinks
#         to point to the certificate files. Use the provided
#         Makefile to update the hash symlinks after changes.
#SSLCARevocationPath "C:/Program Files/Apache Software Foundation/Apache2.4/conf/ssl.crl"
#SSLCARevocationFile "C:/Program Files/Apache Software Foundation/Apache2.4/conf/ssl.crl/ca-bundle.crl"
#SSLCARevocationCheck chain

#   Client Authentication (Type):
#   Client certificate verification type and depth.  Types are
#   none, optional, require and optional_no_ca.  Depth is a
#   number which specifies how deeply to verify the certificate
#   issuer chain before deciding the certificate is not valid.
#SSLVerifyClient require
#SSLVerifyDepth  10

#   TLS-SRP mutual authentication:
#   Enable TLS-SRP and set the path to the OpenSSL SRP verifier
#   file (containing login information for SRP user accounts). 
#   Requires OpenSSL 1.0.1 or newer. See the mod_ssl FAQ for
#   detailed instructions on creating this file. Example:
#   "openssl srp -srpvfile C:/Program Files/Apache Software Foundation/Apache2.4/conf/passwd.srpv -add username"
#SSLSRPVerifierFile "C:/Program Files/Apache Software Foundation/Apache2.4/conf/passwd.srpv"

#   Access Control:
#   With SSLRequire you can do per-directory access control based
#   on arbitrary complex boolean expressions containing server
#   variable checks and other lookup directives.  The syntax is a
#   mixture between C and Perl.  See the mod_ssl documentation
#   for more details.
#<Location />
#SSLRequire (    %{SSL_CIPHER} !~ m/^(EXP|NULL)/ \
#            and %{SSL_CLIENT_S_DN_O} eq "Snake Oil, Ltd." \
#            and %{SSL_CLIENT_S_DN_OU} in {"Staff", "CA", "Dev"} \
#            and %{TIME_WDAY} >= 1 and %{TIME_WDAY} <= 5 \
#            and %{TIME_HOUR} >= 8 and %{TIME_HOUR} <= 20       ) \
#           or %{REMOTE_ADDR} =~ m/^192\.76\.162\.[0-9]+$/
#</Location>

#   SSL Engine Options:
#   Set various options for the SSL engine.
#   o FakeBasicAuth:
#     Translate the client X.509 into a Basic Authorisation.  This means that
#     the standard Auth/DBMAuth methods can be used for access control.  The
#     user name is the `one line' version of the client's X.509 certificate.
#     Note that no password is obtained from the user. Every entry in the user
#     file needs this password: `xxj31ZMTZzkVA'.
#   o ExportCertData:
#     This exports two additional environment variables: SSL_CLIENT_CERT and
#     SSL_SERVER_CERT. These contain the PEM-encoded certificates of the
#     server (always existing) and the client (only existing when client
#     authentication is used). This can be used to import the certificates
#     into CGI scripts.
#   o StdEnvVars:
#     This exports the standard SSL/TLS related `SSL_*' environment variables.
#     Per default this exportation is switched off for performance reasons,
#     because the extraction step is an expensive operation and is usually
#     useless for serving static content. So one usually enables the
#     exportation for CGI and SSI requests only.
#   o StrictRequire:
#     This denies access when "SSLRequireSSL" or "SSLRequire" applied even
#     under a "Satisfy any" situation, i.e. when it applies access is denied
#     and no other module can change it.
#   o OptRenegotiate:
#     This enables optimized SSL connection renegotiation handling when SSL
#     directives are used in per-directory context. 
#SSLOptions +FakeBasicAuth +ExportCertData +StrictRequire
<FilesMatch "\.(cgi|shtml|phtml|php)$">
    SSLOptions +StdEnvVars
</FilesMatch>
<Directory "D:\Code">
    Options Indexes FollowSymLinks Includes
    AllowOverride All
	Require all granted
</Directory>
<Directory "C:/Program Files/Apache Software Foundation/Apache2.4/cgi-bin">
    SSLOptions +StdEnvVars
</Directory>

#   SSL Protocol Adjustments:
#   The safe and default but still SSL/TLS standard compliant shutdown
#   approach is that mod_ssl sends the close notify alert but doesn't wait for
#   the close notify alert from client. When you need a different shutdown
#   approach you can use one of the following variables:
#   o ssl-unclean-shutdown:
#     This forces an unclean shutdown when the connection is closed, i.e. no
#     SSL close notify alert is sent or allowed to be received.  This violates
#     the SSL/TLS standard but is needed for some brain-dead browsers. Use
#     this when you receive I/O errors because of the standard approach where
#     mod_ssl sends the close notify alert.
#   o ssl-accurate-shutdown:
#     This forces an accurate shutdown when the connection is closed, i.e. a
#     SSL close notify alert is send and mod_ssl waits for the close notify
#     alert of the client. This is 100% SSL/TLS standard compliant, but in
#     practice often causes hanging connections with brain-dead browsers. Use
#     this only for browsers where you know that their SSL implementation
#     works correctly. 
#   Notice: Most problems of broken clients are also related to the HTTP
#   keep-alive facility, so you usually additionally want to disable
#   keep-alive for those clients, too. Use variable "nokeepalive" for this.
#   Similarly, one has to force some clients to use HTTP/1.0 to workaround
#   their broken HTTP/1.1 implementation. Use variables "downgrade-1.0" and
#   "force-response-1.0" for this.
BrowserMatch "MSIE [2-5]" \
         nokeepalive ssl-unclean-shutdown \
         downgrade-1.0 force-response-1.0

#   Per-Server Logging:
#   The home of a custom SSL log file. Use this when you want a
#   compact non-error SSL logfile on a virtual host basis.
CustomLog "C:/Program Files/Apache Software Foundation/Apache2.4/logs/ssl_request.log" \
          "%t %h %{SSL_PROTOCOL}x %{SSL_CIPHER}x \"%r\" %b"

</VirtualHost>                                  
